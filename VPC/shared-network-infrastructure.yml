AWSTemplateFormatVersion: 2010-09-09

Description: Shared network infrastructure with vpc, subnets, route tables, internet gateways

Parameters:
  vpccidrrange:
    Type: String
    Default: 10.50.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

Resources:
  myvpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpccidrrange
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - VPC
              - myvpc

  mySubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myvpc
      CidrBlock: 10.50.8.0/21
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - SubnetPublicA
              - !Ref myvpc

  mySubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myvpc
      CidrBlock: 10.50.16.0/21
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - SubnetPublicB
              - !Ref myvpc

  mySubnetPublicC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myvpc
      CidrBlock: 10.50.24.0/21
      AvailabilityZone: !Select
        - 2
        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - SubnetPublicC
              - !Ref myvpc

  mySubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myvpc
      CidrBlock: 10.50.32.0/21
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - SubnetPrivateA
              - !Ref myvpc

  mySubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myvpc
      CidrBlock: 10.50.40.0/21
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - SubnetPrivateB
              - !Ref myvpc

  mySubnetPrivateC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myvpc
      CidrBlock: 10.50.48.0/21
      AvailabilityZone: !Select
        - 2
        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - SubnetPrivateC
              - !Ref myvpc

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - InternetGateway
              - !Ref myvpc

  myInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myvpc
      InternetGatewayId: !Ref myInternetGateway

  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myvpc
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - PublicRouteTable
              - !Ref myvpc

  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myvpc
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - PrivateRouteTable
              - !Ref myvpc

  myRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      GatewayId: !Ref myInternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  myPubASubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref mySubnetPublicA

  myPubBSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref mySubnetPublicB

  myPubCSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref mySubnetPublicC

  myPrivASubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref mySubnetPrivateA

  myPrivBSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref mySubnetPrivateB

  myPrivCSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref mySubnetPrivateC

Outputs:
  VPC:
    Description: Identifier of the VPC
    Value: !Ref myvpc
    Export:
      Name: sharedVPC # TODO Export value needs to be unique within the region. Use programatic naming shceme.

  PublicSubnetA:
    Description: Public subnet in first AZ
    Value: !Ref mySubnetPublicA
    Export:
      Name: sharedSubnetPublicA

  PublicSubnetB:
    Description: Public subnet in second AZ
    Value: !Ref mySubnetPublicB
    Export:
      Name: sharedSubnetPublicB

  PublicSubnetC:
    Description: Public subnet in third AZ
    Value: !Ref mySubnetPublicC
    Export:
      Name: sharedSubnetPublicC

  PrivateSubnetA:
    Description: Private subnet in first AZ
    Value: !Ref mySubnetPrivateA
    Export:
      Name: sharedSubnetPrivateA

  PrivateSubnetB:
    Description: Private subnet in second AZ
    Value: !Ref mySubnetPrivateB
    Export:
      Name: sharedSubnetPrivateB

  PrivateSubnetC:
    Description: Private subnet in third AZ
    Value: !Ref mySubnetPrivateC
    Export:
      Name: sharedSubnetPrivateC
